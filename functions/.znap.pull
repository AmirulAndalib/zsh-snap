#!/bin/zsh
# update repos in parallel
# args: [ <repo> ... ]
zmodload -Fa zsh/files b:zf_rm

.znap.pull() {
  emulate -L zsh; setopt $_znap_opts

  local -a repos=( ~znap/$^@(#q/) ); (( $#repos > 0 )) ||
    repos=( ~znap/*(/) )

  {
    local pwd=$PWD
    cd -q -- ~znap
    .znap.multi '.znap.pull.task '${(i)^repos}
    return
  } always {
    [[ -x $pwd ]] &&
        cd -q -- $pwd
    [[ -v _comp_dumpfile && -f $_comp_dumpfile ]] &&
        zf_rm -f $_comp_dumpfile
    .znap.compile "$repos[@]"
  }
}

.znap.pull.task() {
  emulate -L zsh; setopt $_znap_opts

  .znap.ignore $1 '*.zwc'  # Add `*.zwc` to repo's local ignore list.
  local behind
  if behind=$( git -C $1 rev-list --right-only --count @..@{u} 2>&1 ) && (( behind )); then
    ..znap.tput sc
    print -n -- ${"$( .znap.status $1:t )"%$'\n'}' '
    if git -C $1 pull -q --autostash --rebase --recurse-submodules -j$(ulimit -n) 1>/dev/null; then
      ..znap.tput rc
      ..znap.tput el
      .znap.status $1:t
    fi
    local cache_dir=$XDG_CACHE_HOME/zsh-snap
    zf_rm -f $_comp_dumpfile $cache_dir/eval/${1:t}.zsh $cache_dir/fpath/_$1:t
  fi
}

.znap.pull "$@"
