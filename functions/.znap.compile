#!/bin/zsh
# compile asynchronously
zmodload zsh/{parameter,zselect}
zmodload -F zsh/files b:zf_rm
autoload -Uz add-zle-hook-widget add-zsh-hook
typeset -gHaU _znap_compile_queue=()
typeset -gHi _znap_compile_fd

.znap.compile() {
  emulate -L zsh; setopt $_znap_opts

  _znap_compile_queue+=( $@ ); (( $# > 0 )) ||
    _znap_compile_queue+=( $^fpath/*(N.) )
  add-zsh-hook preexec .znap.compile.next
}

.znap.compile.next() {
  emulate -L zsh; setopt $_znap_opts

  .znap.close-fd $_znap_compile_fd

  if (( $#_znap_compile_queue == 0 )); then
    add-zsh-hook -d preexec .znap.compile.next
    return 0
  fi

  local src=${_znap_compile_queue[1]%.zwc}
  shift _znap_compile_queue
  exec {_znap_compile_fd}< <(
    [[ -w $src:h ]] ||
      return

    local bin=$src.zwc

    [[ -w $bin && $bin -ot $src ]] ||
      zf_rm -f $bin 2>/dev/null || return

    [[ -r $src ]] ||
      return

    local line
    IFS='' read -r line < $src
    if [[ $line != \#* ]]; then
      zf_rm -f $bin 2>/dev/null
      return
    fi

    [[ -e $bin ]] ||
      zcompile -Uz $src 2>/dev/null
  )

  zle ||
    zle -F $_znap_compile_fd .znap.compile.next

  return 0
}

.znap.compile "$@"
