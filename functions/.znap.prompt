#!/bin/zsh
# instant prompt from repo
# args: [ <repo> ] <theme>
zmodload -Fa zsh/files b:zf_mkdir
zmodload -F zsh/parameter p:functions
autoload -Uz add-zsh-hook

.znap.prompt() {
  if (( # )); then
    local repo=~znap/$1; [[ $1 == */* ]] && repo=~[$1]
    local theme=${2:-${${repo##*/((oh-my-|)zsh-|)}%%((-zsh|)-(prompt|theme)|.zsh)}}
    if ! .znap.prompt.load $repo $theme; then
      print -u2 'znap prompt: no such theme:' $@
      return $(( sysexits[(i)NOINPUT] + 63 ))
    fi
  fi

  ..znap.tput civis
  ..znap.tput sc
  add-zsh-hook precmd .znap.prompt.precmd

  autoload -Uz promptinit
  promptinit
  setopt NO_promptsp

  if [[ -n $theme ]]; then
    prompt_themes+=( $theme )
    {
      # Prevent `zsh-syntax-highlighting` from sending us into an infinite loop.
      typeset -gHi _znap__hook_widgets=0
      add-zle-hook-widget() {
        eval ":znap:add-zle-hook-widget:$(( ++_znap__hook_widgets ))() {
          add-zle-hook-widget ${(@q+)@}
        }"
      }

      prompt $theme

      local precmd=prompt_${theme}_precmd
      if [[ -n $functions[$precmd] ]]; then
        $precmd
        functions[:znap:$precmd]=$functions[$precmd]
        eval "$precmd() {
          functions[$precmd]=\$functions[:znap:$precmd]
          unfunction :znap:$precmd
          $precmd \"\$@\"
        }"
      fi
    } always {
      unfunction add-zle-hook-widget
      autoload -Uz add-zle-hook-widget
    }
  fi

  [[ -o promptcr ]] &&
      print -n $'\r'
  :
  print -nPr -- "$PS1"
  ..znap.tput cnorm
}

.znap.prompt.precmd() {
  add-zsh-hook -d precmd ${(%):-%N}

  ..znap.tput civis
  ..znap.tput rc

  add-zle-hook-widget line-init .znap.prompt.line-init

  local -i i; for (( i = 1; i <= _znap__hook_widgets; i++ )); do
    eval :znap:add-zle-hook-widget:$i
  done
  unset _znap__hook_widgets

  return 0
}

.znap.prompt.line-init() {
  add-zle-hook-widget -d line-init ${(%):-%N}

  ..znap.tput cnorm

  [[ -v prompt_opts ]] ||
      setopt promptsp

  return 0
}

.znap.prompt "$@"
