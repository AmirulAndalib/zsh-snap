#!/bin/zsh
# instantly init prompt theme from repo
# args: [ <repo> ] <theme>
zmodload -Fa zsh/files b:zf_mkdir
zmodload -F zsh/parameter p:functions
zmodload -F zsh/terminfo b:echoti p:terminfo
autoload -Uz add-zsh-hook

.znap.prompt.echoti() {
  [[ -v terminfo[$1] ]] &&
    echoti $@
}

.znap.prompt.setup() {
  emulate -L zsh; setopt $_znap_opts

  local setup=prompt_${theme}_setup
  [[ -v functions[$setup] ]] &&
    return
  autoload +X -Uz $setup 2>/dev/null &&
    return

  unfunction $setup

  local -aU matches=( ~znap/{$plugin,*$plugin*}(-/) )
  local repo=$matches[1]
  if [[ -z $repo ]]; then
    print -u2 "znap prompt: no such theme '$*' in" ~znap
    .znap.help prompt
    return 66
  fi

  local file=( $repo/***/$setup(-.) )
  if autoload +X -Uz $file 2>/dev/null; then
    fpath=( $file:h $fpath[@] )
    return
  fi

  unfunction $setup

  local cache_dir=$XDG_CACHE_HOME/zsh-snap/prompt
  [[ -d $cache_dir ]] ||
    zf_mkdir -pm 0700 $cache_dir
  fpath=( $cache_dir $fpath[@] )

  local cache_file=$cache_dir/$setup
  if [[ ! -f $cache_file || $repo/${GIT_DIR:-.git}/index -nt $cache_file ]]; then
    local -a theme_file=( $repo/***/${~theme:-*}.zsh-theme(-.Y1) )
    print -r - .znap.source $repo:t ${theme_file[1]#$repo/} >! $cache_file
  fi

  autoload +X -Uz $setup
}

.znap.prompt() {
  if (( $# < 1 )); then
    print -u2 'znap prompt: not enough arguments'
    .znap.help prompt
    return 64
  fi

  local plugin=$1
  () {
    emulate -L zsh; setopt $_znap_opts

    if [[ $plugin == */* ]]; then
      plugin=${${plugin##*/}%.git}
      [[ -d ~[$plugin] ]] ||
        .znap.clone $1
    fi
  } "$@"

  local theme=${2:-$plugin}
  .znap.prompt.setup "$@" ||
    return

  autoload -Uz promptinit
  promptinit
  prompt_themes+=( $theme )

  add-zsh-hook precmd .znap.prompt.precmd
  {
    # Prevent `zsh-syntax-highlighting` from sending us into an infinite loop.
    typeset -gHi _znap__hook_widgets=0
    add-zle-hook-widget() {
      eval ":znap:add-zle-hook-widget:$(( ++_znap__hook_widgets ))() {
        add-zle-hook-widget $*
      }"
    }

    setopt prompt{bang,cr,percent,subst} NO_promptsp
    prompt $theme >/dev/null

    local precmd=prompt_${theme}_precmd
    [[ -n $functions[$precmd] ]] &&
      $precmd >/dev/null
    functions[:znap:$precmd]=$functions[$precmd]
    eval "$precmd() {
      functions[$precmd]=\$functions[:znap:$precmd]
      unfunction :znap:$precmd
    }"
  } always {
    unfunction add-zle-hook-widget
    autoload -Uz add-zle-hook-widget
  }

  .znap.prompt.echoti sc
  [[ -o promptcr ]] &&
    print -n $'\r'
  :
  print -nPr - "$PS1"
  .znap.prompt.echoti cnorm

  add-zsh-hook precmd .znap.prompt.precmd
}

.znap.prompt.precmd() {
  local 0=${(%):-%N}
  add-zsh-hook -d precmd $0
  unfunction $0

  [[ -v prompt_opts ]] ||
    setopt promptsp

  add-zle-hook-widget line-init .znap.prompt.line-init
  local -i i; for (( i = 1; i <= _znap__hook_widgets; i++ )); do
    eval :znap:add-zle-hook-widget:$i
  done
  unset _znap__hook_widgets

  return 0
}

.znap.prompt.line-init() {
  local 0=${(%):-%N}
  add-zle-hook-widget -d line-init $0
  unfunction $0

  PS1='' zle .reset-prompt
  zle .reset-prompt

  unfunction .znap.prompt .znap.prompt.echoti .znap.prompt.setup
  autoload -Uz .znap.prompt
  return 0
}

.znap.prompt "$@"
