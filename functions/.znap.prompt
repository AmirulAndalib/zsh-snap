#!/bin/zsh
# init prompt from repo

.znap.prompt.setup() {
  emulate -L zsh; setopt extendedglob globstarshort rcquotes

  local setup=prompt_${theme}_setup

  if ! autoload +X -Uz $setup 2>/dev/null; then
    unfunction $setup

    local basedir=$(.znap.path) || return
    local -a matches=( $basedir/{$1,*$1*}(N/) )
    local repo=$matches[1]

    if [[ -z $repo ]]; then
      print -u2 "znap prompt: no such theme '$*' in $basedir"
      return 1
    fi

    typeset -gU FPATH fpath=( $repo $fpath[@] )

    if ! autoload +X -Uz $setup 2>/dev/null; then
      unfunction $setup
      local -a theme_file=( $repo/***/${~2:-*}.zsh-theme(N.Y1) )
      if [[ ! -r $theme_file ]]; then
        print -u2 "znap prompt: no such theme '$*' in $repo"
        return 1
      fi
      print -r "znap source $repo:t ${theme_file[1]#$repo/}" >! $basedir/$setup
      fpath=( $basedir $fpath )
    fi
  fi
}

.znap.prompt() {
  if (( $# < 1 )); then
    print -u2 'znap prompt: not enough arguments'
    print -u2 'usage: znap prompt [<repo>] <theme>'
    return 1
  fi

  local theme=${2:-$1}
  .znap.prompt.setup "$@" || return

  echoti sc  # save cursor position

  setopt prompt{bang,cr,percent,subst} NO_promptsp
  autoload -Uz promptinit
  promptinit
  prompt $theme || return

  local preview=prompt_${theme}_preview
  if [[ -v functions[$preview] ]]; then
    $preview

  else
    local precmd=prompt_${theme}_precmd
    [[ -n $precmd_functions[(r)$precmd] ]] &&
      $precmd

    [[ -o promptcr ]] &&
      print -n $'\r'

    :
    print -nP "$PS1"

    local preexec=prompt_${theme}_preexec
    [[ -n $preexec_functions[(r)$preexec] ]] &&
      $preexec
  fi

  typeset -gHi _znap__stderr_copy
  typeset -gH _znap__stderr=${TMPDIR:-/tmp}/znap-stderr-${(%):-%n}-$$
  exec {_znap__stderr_copy}>&2 2>$_znap__stderr

  add-zsh-hook precmd .znap.prompt.precmd
  add-zle-hook-widget line-init .znap.prompt.line-init
}

.znap.prompt.precmd() {
  add-zsh-hook -d precmd $=funcstack[1]

  echoti civis  # invisible cursor
  echoti rc  # restore cursor position
  echoti invis  # invisible text

  return 0
}

.znap.prompt.line-init() {
  add-zle-hook-widget -d line-init $=funcstack[1]

  zle .reset-prompt

  exec 2>&$_znap__stderr_copy {_znap__stderr_copy}>&-
  unset _znap__stderr_copy

  local err="$(<$_znap__stderr)"
  zmodload -F zsh/files b:zf_rm &&
    zf_rm -f -- $_znap__stderr

  [[ $err == [[:IFS:]]# ]] ||
    print -u2 -r "$err"

  echoti cnorm  # normal, visible cursor

  return 0
}

zmodload zsh/{parameter,system}
autoload -Uz add-zle-hook-widget add-zsh-hook

.znap.prompt "$@"
