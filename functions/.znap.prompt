#!/bin/zsh
# instantly init prompt theme from repo
# args: [<repo>] <theme>
zmodload -F zsh/parameter p:functions
zmodload -F zsh/terminfo b:echoti p:terminfo
autoload -Uz add-zle-hook-widget add-zsh-hook

.znap.prompt.setup() {
  emulate -L zsh; setopt $_znap_opts

  local setup=prompt_${theme}_setup
  [[ -v functions[$setup] ]] &&
    return
  if ! autoload +X -Uz $setup 2>/dev/null; then
    unfunction $setup

    local -aU matches=( ~znap/{$plugin,*$plugin*}(-/) )
    local repo=$matches[1]

    if [[ -z $repo ]]; then
      print -u2 "znap prompt: no such theme '$*' in" ~znap
      .znap.help prompt
      return 66
    fi

    local file=( $repo/***/$setup(-.) )
    fpath=( $file:h $fpath[@] )
    if ! autoload +X -Uz $setup 2>/dev/null; then
      unfunction $setup

      local -a theme_file=( $repo/***/${~theme:-*}.zsh-theme(-.Y1) )
      print -r - .znap.source $repo:t ${theme_file[1]#$repo/} >! ~znap/$setup
      fpath=( ~znap $fpath[@] )
    fi
  fi
}

.znap.prompt() {
  if (( $# < 1 )); then
    print -u2 'znap prompt: not enough arguments'
    .znap.help prompt
    return 64
  fi

  local plugin=$1
  () {
    emulate -L zsh; setopt $_znap_opts

    if [[ $plugin == */* ]]; then
      plugin=${${plugin##*/}%.git}
      [[ -d ~[$plugin] ]] ||
        .znap.clone $1
    fi
  } "$@"

  local theme=${2:-$plugin}
  .znap.prompt.setup "$@" || return

  setopt prompt{bang,cr,percent,subst} NO_promptsp
  autoload -Uz promptinit
  promptinit

  add-zsh-hook precmd .znap.prompt.precmd

  .znap.prompt.echoti sc    # save cursor position
  .znap.prompt.echoti civis # invisible cursor

  prompt_themes+=( $theme )
  prompt $theme

  local precmd=prompt_${theme}_precmd
  [[ -n $functions[$precmd] ]] &&
    $precmd

  [[ -o promptcr ]] &&
    print -n $'\r'

  :
  print -nP "$PS1"

  .znap.prompt.echoti cnorm  # normal cursor
}

.znap.prompt.precmd() {
  add-zsh-hook -d precmd ${(%):-%N}

  add-zle-hook-widget line-init .znap.prompt.line-init

  .znap.prompt.echoti civis  # invisible cursor
  .znap.prompt.echoti invis  # invisible text
  .znap.prompt.echoti rc  # restore cursor position

  return 0
}

.znap.prompt.line-init() {
  add-zle-hook-widget -d line-init ${(%):-%N}

  zle .reset-prompt
  .znap.prompt.echoti cnorm  # normal cursor
  zle -R

  return 0
}

.znap.prompt.echoti() {
  [[ -v terminfo[$1] ]] &&
    echoti $@
}

.znap.prompt "$@"
