#!/bin/zsh
# show git status of each repo
# args: [<repo>...]

.znap.status() {
  emulate -L zsh; setopt $_znap_opts

  local basedir=$(.znap.path) || return
  local -a repos=( $basedir/$^@(#q/) ); (( $#repos > 0 )) ||
    repos=( $basedir/*(/) )

  {
    local pwd=$PWD
    cd -q $basedir

    .znap.multi '.znap.status.task '${(i)^repos}
  } always {
    [[ -x $pwd ]] &&
      cd -q $pwd
  }
  return 0
}

.znap.status.task() {
  emulate -L zsh; setopt $_znap_opts

  local file; for file in $1/${GIT_DIR:-.git}/***/info/exclude(.); do
    local -aU lines
    [[ -r $file ]] &&
      lines=( ${(f)"$(<$file)"} )
    lines+=( '*.zwc' )
    print -r "${(F)lines}" >! $file 2>/dev/null
  done

  git -C $1 fetch --recurse-submodules -j$(ulimit -n) &>/dev/null

  local repo=${$(eval "ls -d $1:t")%/}

  local log="$(git -C $1 log -n1 --decorate --oneline)"
  local rev
  if [[ $log ==  *'tag: '* ]]; then
    local -a chunks=( ${(s.tag: .)log} )
    rev="${chunks[1]##*[ (]}${chunks[2]%%[,)]*}"
  fi

  lines=( "${(f)$(git -C $1 status -sb)}" )
  local branch=${${lines[1]#'## '}%...*}
  local ahead_behind=${${(M)lines[1]% \[*\]}# }
  local -aU changes=( ${(M@)${(@)lines:#\#\# *}##( |)[^ ]##} )
  changes=( ${(@)${(i@)changes}# } )

  local e=$'\e'
  [[ -z $ahead_behind && -z $changes ]] &&
      ahead_behind="${e}[32mâœ”${e}[39m"

  print -r $repo $rev ${branch:#*(main|master)*} $ahead_behind $changes
}

.znap.status "$@"
