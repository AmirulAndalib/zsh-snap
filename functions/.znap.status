#!/bin/zsh
# show one-line git status for each repo
# args: [ <repo> ... ]

.znap.status() {
  emulate -L zsh; setopt $_znap_opts

  local -a repos=( ~znap/$^@(#q/) ); (( $#repos > 0 )) ||
    repos=( ~znap/*(/) )

  {
    local -i ret=1
    local pwd=$PWD
    cd -q -- ~znap

    .znap.multi '.znap.status.task '${(i)^repos}
    ret=$?
  } always {
    [[ -x $pwd ]] &&
      cd -q -- $pwd
  }
  return ret
}

.znap.status.task() {
  emulate -L zsh; setopt $_znap_opts

  git -C $1 fetch --recurse-submodules -j$(ulimit -n) &>/dev/null ||
    return  # Bail out if this is not a Git repo.

  local log="$(git -C $1 log -n1 --decorate --oneline)"
  local rev
  if [[ $log ==  *'tag: '* ]]; then
    local -a chunks=( ${(s.tag: .)log} )
    rev="${chunks[1]##*[ (]}${chunks[2]%%[,)]*}"
  fi

  .znap.ignore $1:t '*.zwc'  # Add `*.zwc` to repo's local ignore list.

  local -aU lines=( "${(f)$(git -C $1 status -sb)}" )
  local MATCH MBEGIN MEND
  local -aU changes=( ${(0)${${(F)lines[2,-1]}// [[:print:]]#($'\n'|)}//$'m\C-['/$'m\0\C-['} )
  changes=( ${(@)changes[@]//(#m)('??'|'!!')/$MATCH[1]} )
  local ahead_behind=${${(M)lines[1]% \[*\]}# }
  [[ -z $ahead_behind && -z $changes ]] &&
      ahead_behind=$'\e[32mâœ“\e[39m'

  print -r ${$(eval "ls -d $1:t")%/} $rev ${${${lines[1]#'## '}%...*}:#*(main|master)*} \
    $ahead_behind $changes
}

.znap.status "$@"
